{"id": "7235a03e-517a-4e60-be76-fcf2ffd47aaa", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "Task: Design a PyTorch CV model for image classification.\nDataset: MNIST (28x28 grayscale).\nResource limits: params â‰¤ 300000; latency budget: tight (edge-friendly).\nConstraints: use standard layers only; no pretrained weights.\nAllowed training tricks: dropout<=0.5, ema, grad_clip<=3.0.\nOutput contract: one Python code block defining a complete nn.Module (e.g., class Net(nn.Module))."}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for BertEncoder\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom transformers import PretrainedConfig\n\n# ---- src.transformers.models.bert.configuration_bert.BertConfig ----\nclass BertConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`BertModel`] or a [`TFBertModel`]. It is used to\n    instantiate a BERT model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the BERT\n    [google-bert/bert-base-uncased](https://huggingface.co/google-bert/bert-base-uncased) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://huggingface.co/papers/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://huggingface.co/papers/2009.13658).\n        is_decoder (`bool`, *optional*, defaults to `False`):\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Examples:\n\n    ```python\n    >>> from transformers import BertConfig, BertModel\n\n    >>> # Initializing a BERT google-bert/bert-base-uncased style configuration\n    >>> configuration = BertConfig()\n\n    >>> # Initializing a model (with random weights) from the google-bert/bert-base-uncased style configuration\n    >>> model = BertModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"bert\"\n\n    def __init__(\n        self,\n        vocab_size=30522,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=512,\n        type_vocab_size=2,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        pad_token_id=0,\n        position_embedding_type=\"absolute\",\n        use_cache=True,\n        classifier_dropout=None,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.use_cache = use_cache\n        self.classifier_dropout = classifier_dropout\n\n# ---- mmdet.models.language_models.bert.HFBertModel ----\ntry:\n    from transformers import AutoTokenizer, BertConfig\n    from transformers import BertModel as HFBertModel\nexcept ImportError:\n    AutoTokenizer = None\n    HFBertModel = None\n\n# ---- BertEncoder (target) ----\nclass BertEncoder(nn.Module):\n    \"\"\"BERT encoder for language embedding.\n\n    Args:\n        name (str): name of the pretrained BERT model from HuggingFace.\n                Defaults to bert-base-uncased.\n        add_pooling_layer (bool): whether to add a pooling layer.\n        num_layers_of_embedded (int): number of layers of the embedded model.\n                Defaults to 1.\n        use_checkpoint (bool): whether to use gradient checkpointing.\n                Defaults to False.\n    \"\"\"\n\n    def __init__(self,\n                 name: str,\n                 add_pooling_layer: bool = False,\n                 num_layers_of_embedded: int = 1,\n                 use_checkpoint: bool = False):\n        super().__init__()\n        if BertConfig is None:\n            raise RuntimeError(\n                'transformers is not installed, please install it by: '\n                'pip install transformers.')\n        config = BertConfig.from_pretrained(name)\n        config.gradient_checkpointing = use_checkpoint\n        # only encoder\n        self.model = HFBertModel.from_pretrained(\n            name, add_pooling_layer=add_pooling_layer, config=config)\n        self.language_dim = config.hidden_size\n        self.num_layers_of_embedded = num_layers_of_embedded\n\n    def forward(self, x) -> dict:\n        mask = x['attention_mask']\n\n        outputs = self.model(\n            input_ids=x['input_ids'],\n            attention_mask=mask,\n            position_ids=x['position_ids'],\n            token_type_ids=x['token_type_ids'],\n            output_hidden_states=True,\n        )\n\n        # outputs has 13 layers, 1 input layer and 12 hidden layers\n        encoded_layers = outputs.hidden_states[1:]\n        features = torch.stack(encoded_layers[-self.num_layers_of_embedded:],\n                               1).mean(1)\n        # language embedding has shape [len(phrase), seq_len, language_dim]\n        features = features / self.num_layers_of_embedded\n        if mask.dim() == 2:\n            embedded = features * mask.unsqueeze(-1).float()\n        else:\n            embedded = features\n\n        results = {\n            'embedded': embedded,\n            'masks': mask,\n            'hidden': encoded_layers[-1]\n        }\n        return results\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.classifier = nn.Linear(64, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 64, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n        ]\n\n        self.bert_encoder = BertEncoder('bert-base-uncased', add_pooling_layer=False, num_layers_of_embedded=1, use_checkpoint=True)\n        self.channel_proj = nn.Conv2d(768, 64, 1)\n\n        self._last_channels = 64\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        B, C, H, W = x.shape\n        \n        x_small = torch.nn.functional.adaptive_avg_pool2d(x, (4, 4))\n        B, C, H_small, W_small = x_small.shape\n        \n        input_ids = torch.arange(H_small*W_small, device=x.device).unsqueeze(0).expand(B, -1) % 1000\n        attention_mask = torch.ones_like(input_ids)\n        position_ids = torch.arange(H_small*W_small, device=x.device).unsqueeze(0).expand(B, -1) % 512\n        token_type_ids = torch.zeros_like(input_ids)\n        \n        bert_input = {\n            'input_ids': input_ids,\n            'attention_mask': attention_mask,\n            'position_ids': position_ids,\n            'token_type_ids': token_type_ids\n        }\n        \n        bert_output = self.bert_encoder(bert_input)\n        x_embedded = bert_output['embedded']\n        \n        x_embedded = x_embedded.transpose(1, 2).view(B, 768, H_small, W_small)\n        \n        # Project to match input channels first\n        x_embedded = self.channel_proj(x_embedded)\n        \n        # Then upsample\n        x_embedded = torch.nn.functional.interpolate(x_embedded, size=(H, W), mode='bilinear', align_corners=False)\n        \n        attention_weights = torch.sigmoid(x_embedded)\n        x_attended = x * attention_weights\n        \n        x = self.avgpool(x_attended)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-6990ca825ae1a9dfe75d98d648b211b1__636a3d469689.py", "has_module": true, "family": "resnet", "param_estimate": 49152, "class_names": ["BertConfig", "BertEncoder", "Net"], "calls": ["__init__", "super", "__init__", "super", "RuntimeError", "from_pretrained", "from_pretrained", "model", "mean", "stack", "dim", "float", "unsqueeze", "__init__", "super", "build_features", "AdaptiveAvgPool2d", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "BertEncoder", "Conv2d", "Sequential", "features", "adaptive_avg_pool2d", "expand", "unsqueeze", "arange", "ones_like", "expand", "unsqueeze", "arange", "zeros_like", "bert_encoder", "view", "transpose", "channel_proj", "interpolate", "sigmoid", "avgpool", "flatten", "classifier", "to", "to", "CrossEntropyLoss", "SGD", "parameters", "train", "to", "to", "zero_grad", "self", "criteria", "backward", "clip_grad_norm_", "parameters", "step"], "type": "full"}, "_drop_reason": "no_nn_module"}
{"id": "d4b3aaaa-b123-4e3c-974b-06c6f3f15d6d", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "# Auto-generated single-file for BertEncoder\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom transformers import PretrainedConfig\n\n# ---- src.transformers.models.bert.configuration_bert.BertConfig ----\nclass BertConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`BertModel`] or a [`TFBertModel`]. It is used to\n    instantiate a BERT model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the BERT\n    [google-bert/bert-base-uncased](https://huggingface.co/google-bert/bert-base-uncased) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://huggingface.co/papers/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://huggingface.co/papers/2009.13658).\n        is_decoder (`bool`, *optional*, defaults to `False`):\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Examples:\n\n    ```python\n    >>> from transformers import BertConfig, BertModel\n\n    >>> # Initializing a BERT google-bert/bert-base-uncased style configuration\n    >>> configuration = BertConfig()\n\n    >>> # Initializing a model (with random weights) from the google-bert/bert-base-uncased style configuration\n    >>> model = BertModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"bert\"\n\n    def __init__(\n        self,\n        vocab_size=30522,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=512,\n        type_vocab_size=2,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        pad_token_id=0,\n        position_embedding_type=\"absolute\",\n        use_cache=True,\n        classifier_dropout=None,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.use_cache = use_cache\n        self.classifier_dropout = classifier_dropout\n\n# ---- mmdet.models.language_models.bert.HFBertModel ----\ntry:\n    from transformers import AutoTokenizer, BertConfig\n    from transformers import BertModel as HFBertModel\nexcept ImportError:\n    AutoTokenizer = None\n    HFBertModel = None\n\n# ---- BertEncoder (target) ----\nclass BertEncoder(nn.Module):\n    \"\"\"BERT encoder for language embedding.\n\n    Args:\n        name (str): name of the pretrained BERT model from HuggingFace.\n                Defaults to bert-base-uncased.\n        add_pooling_layer (bool): whether to add a pooling layer.\n        num_layers_of_embedded (int): number of layers of the embedded model.\n                Defaults to 1.\n        use_checkpoint (bool): whether to use gradient checkpointing.\n                Defaults to False.\n    \"\"\"\n\n    def __init__(self,\n                 name: str,\n                 add_pooling_layer: bool = False,\n                 num_layers_of_embedded: int = 1,\n                 use_checkpoint: bool = False):\n        super().__init__()\n        if BertConfig is None:\n            raise RuntimeError(\n                'transformers is not installed, please install it by: '\n                'pip install transformers.')\n        config = BertConfig.from_pretrained(name)\n        config.gradient_checkpointing = use_checkpoint\n        # only encoder\n        self.model = HFBertModel.from_pretrained(\n            name, add_pooling_layer=add_pooling_layer, config=config)\n        self.language_dim = config.hidden_size\n        self.num_layers_of_embedded = num_layers_of_embedded\n\n    def forward(self, x) -> dict:\n        mask = x['attention_mask']\n\n        outputs = self.model(\n            input_ids=x['input_ids'],\n            attention_mask=mask,\n            position_ids=x['position_ids'],\n            token_type_ids=x['token_type_ids'],\n            output_hidden_states=True,\n        )\n\n        # outputs has 13 layers, 1 input layer and 12 hidden layers\n        encoded_layers = outputs.hidden_states[1:]\n        features = torch.stack(encoded_layers[-self.num_layers_of_embedded:],\n                               1).mean(1)\n        # language embedding has shape [len(phrase), seq_len, language_dim]\n        features = features / self.num_layers_of_embedded\n        if mask.dim() == 2:\n            embedded = features * mask.unsqueeze(-1).float()\n        else:\n            embedded = features\n\n        results = {\n            'embedded': embedded,\n            'masks': mask,\n            'hidden': encoded_layers[-1]\n        }\n        return results\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.classifier = nn.Linear(64, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 64, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n        ]\n\n        self.bert_encoder = BertEncoder('bert-base-uncased', add_pooling_layer=False, num_layers_of_embedded=1, use_checkpoint=True)\n        self.channel_proj = nn.Conv2d(768, 64, 1)\n\n        self._last_channels = 64\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        # >>> FILL HERE: implement forward() <<<\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()"}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for BertEncoder\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom transformers import PretrainedConfig\n\n# ---- src.transformers.models.bert.configuration_bert.BertConfig ----\nclass BertConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`BertModel`] or a [`TFBertModel`]. It is used to\n    instantiate a BERT model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the BERT\n    [google-bert/bert-base-uncased](https://huggingface.co/google-bert/bert-base-uncased) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://huggingface.co/papers/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://huggingface.co/papers/2009.13658).\n        is_decoder (`bool`, *optional*, defaults to `False`):\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Examples:\n\n    ```python\n    >>> from transformers import BertConfig, BertModel\n\n    >>> # Initializing a BERT google-bert/bert-base-uncased style configuration\n    >>> configuration = BertConfig()\n\n    >>> # Initializing a model (with random weights) from the google-bert/bert-base-uncased style configuration\n    >>> model = BertModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"bert\"\n\n    def __init__(\n        self,\n        vocab_size=30522,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=512,\n        type_vocab_size=2,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        pad_token_id=0,\n        position_embedding_type=\"absolute\",\n        use_cache=True,\n        classifier_dropout=None,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.use_cache = use_cache\n        self.classifier_dropout = classifier_dropout\n\n# ---- mmdet.models.language_models.bert.HFBertModel ----\ntry:\n    from transformers import AutoTokenizer, BertConfig\n    from transformers import BertModel as HFBertModel\nexcept ImportError:\n    AutoTokenizer = None\n    HFBertModel = None\n\n# ---- BertEncoder (target) ----\nclass BertEncoder(nn.Module):\n    \"\"\"BERT encoder for language embedding.\n\n    Args:\n        name (str): name of the pretrained BERT model from HuggingFace.\n                Defaults to bert-base-uncased.\n        add_pooling_layer (bool): whether to add a pooling layer.\n        num_layers_of_embedded (int): number of layers of the embedded model.\n                Defaults to 1.\n        use_checkpoint (bool): whether to use gradient checkpointing.\n                Defaults to False.\n    \"\"\"\n\n    def __init__(self,\n                 name: str,\n                 add_pooling_layer: bool = False,\n                 num_layers_of_embedded: int = 1,\n                 use_checkpoint: bool = False):\n        super().__init__()\n        if BertConfig is None:\n            raise RuntimeError(\n                'transformers is not installed, please install it by: '\n                'pip install transformers.')\n        config = BertConfig.from_pretrained(name)\n        config.gradient_checkpointing = use_checkpoint\n        # only encoder\n        self.model = HFBertModel.from_pretrained(\n            name, add_pooling_layer=add_pooling_layer, config=config)\n        self.language_dim = config.hidden_size\n        self.num_layers_of_embedded = num_layers_of_embedded\n\n    def forward(self, x) -> dict:\n        mask = x['attention_mask']\n\n        outputs = self.model(\n            input_ids=x['input_ids'],\n            attention_mask=mask,\n            position_ids=x['position_ids'],\n            token_type_ids=x['token_type_ids'],\n            output_hidden_states=True,\n        )\n\n        # outputs has 13 layers, 1 input layer and 12 hidden layers\n        encoded_layers = outputs.hidden_states[1:]\n        features = torch.stack(encoded_layers[-self.num_layers_of_embedded:],\n                               1).mean(1)\n        # language embedding has shape [len(phrase), seq_len, language_dim]\n        features = features / self.num_layers_of_embedded\n        if mask.dim() == 2:\n            embedded = features * mask.unsqueeze(-1).float()\n        else:\n            embedded = features\n\n        results = {\n            'embedded': embedded,\n            'masks': mask,\n            'hidden': encoded_layers[-1]\n        }\n        return results\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.classifier = nn.Linear(64, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 64, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n        ]\n\n        self.bert_encoder = BertEncoder('bert-base-uncased', add_pooling_layer=False, num_layers_of_embedded=1, use_checkpoint=True)\n        self.channel_proj = nn.Conv2d(768, 64, 1)\n\n        self._last_channels = 64\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        B, C, H, W = x.shape\n        \n        x_small = torch.nn.functional.adaptive_avg_pool2d(x, (4, 4))\n        B, C, H_small, W_small = x_small.shape\n        \n        input_ids = torch.arange(H_small*W_small, device=x.device).unsqueeze(0).expand(B, -1) % 1000\n        attention_mask = torch.ones_like(input_ids)\n        position_ids = torch.arange(H_small*W_small, device=x.device).unsqueeze(0).expand(B, -1) % 512\n        token_type_ids = torch.zeros_like(input_ids)\n        \n        bert_input = {\n            'input_ids': input_ids,\n            'attention_mask': attention_mask,\n            'position_ids': position_ids,\n            'token_type_ids': token_type_ids\n        }\n        \n        bert_output = self.bert_encoder(bert_input)\n        x_embedded = bert_output['embedded']\n        \n        x_embedded = x_embedded.transpose(1, 2).view(B, 768, H_small, W_small)\n        \n        # Project to match input channels first\n        x_embedded = self.channel_proj(x_embedded)\n        \n        # Then upsample\n        x_embedded = torch.nn.functional.interpolate(x_embedded, size=(H, W), mode='bilinear', align_corners=False)\n        \n        attention_weights = torch.sigmoid(x_embedded)\n        x_attended = x * attention_weights\n        \n        x = self.avgpool(x_attended)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-6990ca825ae1a9dfe75d98d648b211b1__636a3d469689.py", "has_module": true, "family": "resnet", "param_estimate": 49152, "class_names": ["BertConfig", "BertEncoder", "Net"], "calls": ["__init__", "super", "__init__", "super", "RuntimeError", "from_pretrained", "from_pretrained", "model", "mean", "stack", "dim", "float", "unsqueeze", "__init__", "super", "build_features", "AdaptiveAvgPool2d", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "BertEncoder", "Conv2d", "Sequential", "features", "adaptive_avg_pool2d", "expand", "unsqueeze", "arange", "ones_like", "expand", "unsqueeze", "arange", "zeros_like", "bert_encoder", "view", "transpose", "channel_proj", "interpolate", "sigmoid", "avgpool", "flatten", "classifier", "to", "to", "CrossEntropyLoss", "SGD", "parameters", "train", "to", "to", "zero_grad", "self", "criteria", "backward", "clip_grad_norm_", "parameters", "step"], "type": "infill"}, "_drop_reason": "no_nn_module"}
{"id": "1c5a8f20-3c7b-4780-8deb-184759996b58", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "Task: Design a PyTorch CV model for image classification.\nDataset: Tiny-ImageNet (64x64 RGB).\nResource limits: params â‰¤ 300000; latency budget: tight (edge-friendly).\nConstraints: use standard layers only; no pretrained weights.\nAllowed training tricks: cutmix<=0.2, grad_clip<=3.0, mixup<=0.2.\nOutput contract: one Python code block defining a complete nn.Module (e.g., class Net(nn.Module))."}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for ViTPatchEmbeddings\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nimport collections\nfrom transformers import PretrainedConfig\nfrom collections import *\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.vit.configuration_vit.ViTConfig ----\nclass ViTConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ViTModel`]. It is used to instantiate an ViT\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the ViT\n    [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        encoder_stride (`int`, *optional*, defaults to 16):\n           Factor to increase the spatial resolution by in the decoder head for masked image modeling.\n        pooler_output_size (`int`, *optional*):\n           Dimensionality of the pooler layer. If None, defaults to `hidden_size`.\n        pooler_act (`str`, *optional*, defaults to `\"tanh\"`):\n           The activation function to be used by the pooler. Keys of ACT2FN are supported for Flax and\n           Pytorch, and elements of https://www.tensorflow.org/api_docs/python/tf/keras/activations are\n           supported for Tensorflow.\n\n    Example:\n\n    ```python\n    >>> from transformers import ViTConfig, ViTModel\n\n    >>> # Initializing a ViT vit-base-patch16-224 style configuration\n    >>> configuration = ViTConfig()\n\n    >>> # Initializing a model (with random weights) from the vit-base-patch16-224 style configuration\n    >>> model = ViTModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"vit\"\n\n    def __init__(\n        self,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.0,\n        attention_probs_dropout_prob=0.0,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        image_size=224,\n        patch_size=16,\n        num_channels=3,\n        qkv_bias=True,\n        encoder_stride=16,\n        pooler_output_size=None,\n        pooler_act=\"tanh\",\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.qkv_bias = qkv_bias\n        self.encoder_stride = encoder_stride\n        self.pooler_output_size = pooler_output_size if pooler_output_size else hidden_size\n        self.pooler_act = pooler_act\n\n# ---- ViTPatchEmbeddings (target) ----\nclass ViTPatchEmbeddings(nn.Module):\n    \"\"\"\n    This class turns `pixel_values` of shape `(batch_size, num_channels, height, width)` into the initial\n    `hidden_states` (patch embeddings) of shape `(batch_size, seq_length, hidden_size)` to be consumed by a\n    Transformer.\n    \"\"\"\n\n    def __init__(self, config: ViTConfig):\n        super().__init__()\n        image_size, patch_size = config.image_size, config.patch_size\n        num_channels, hidden_size = config.num_channels, config.hidden_size\n\n        image_size = image_size if isinstance(image_size, collections.abc.Iterable) else (image_size, image_size)\n        patch_size = patch_size if isinstance(patch_size, collections.abc.Iterable) else (patch_size, patch_size)\n        num_patches = (image_size[1] // patch_size[1]) * (image_size[0] // patch_size[0])\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.num_patches = num_patches\n\n        self.projection = nn.Conv2d(num_channels, hidden_size, kernel_size=patch_size, stride=patch_size)\n\n    def forward(self, pixel_values: torch.Tensor, interpolate_pos_encoding: bool = False) -> torch.Tensor:\n        batch_size, num_channels, height, width = pixel_values.shape\n        if num_channels != self.num_channels:\n            raise ValueError(\n                \"Make sure that the channel dimension of the pixel values match with the one set in the configuration.\"\n                f\" Expected {self.num_channels} but got {num_channels}.\"\n            )\n        if not interpolate_pos_encoding:\n            if height != self.image_size[0] or width != self.image_size[1]:\n                raise ValueError(\n                    f\"Input image size ({height}*{width}) doesn't match model\"\n                    f\" ({self.image_size[0]}*{self.image_size[1]}).\"\n                )\n        embeddings = self.projection(pixel_values).flatten(2).transpose(1, 2)\n        return embeddings\n\ndef supported_hyperparameters():\n    return {'lr', 'momentum'}\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n        \n        config = ViTConfig(\n            hidden_size=64,\n            image_size=32,\n            patch_size=4,\n            num_channels=self.in_channels\n        )\n        \n        self.vit_patch_embeddings = ViTPatchEmbeddings(config)\n        self.classifier = nn.Linear(64, self.num_classes)\n\n    def forward(self, x):\n        B, C, H, W = x.shape\n        \n        x = torch.nn.functional.adaptive_avg_pool2d(x, (32, 32))\n        \n        x = self.vit_patch_embeddings(x)\n        \n        x = x.mean(dim=1)\n        x = self.classifier(x)\n        return x\n\n    def train_setup(self, prm: dict):\n        self.optimizer = torch.optim.SGD(self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n        self.criterion = nn.CrossEntropyLoss()\n\n    def learn(self, data_roll):\n        for data, target in data_roll:\n            data, target = data.to(self.device), target.to(self.device)\n            self.optimizer.zero_grad()\n            output = self.forward(data)\n            loss = self.criterion(output, target)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), max_norm=1.0)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-d820255594e76adf29ff0e5f37f6aa3c__e82eb615e95b.py", "has_module": true, "family": "resnet", "param_estimate": 0, "class_names": ["Net", "ViTConfig", "ViTPatchEmbeddings"], "calls": ["__init__", "super", "__init__", "super", "isinstance", "isinstance", "Conv2d", "ValueError", "ValueError", "transpose", "flatten", "projection", "__init__", "super", "ViTConfig", "ViTPatchEmbeddings", "Linear", "adaptive_avg_pool2d", "vit_patch_embeddings", "mean", "classifier", "SGD", "parameters", "CrossEntropyLoss", "to", "to", "zero_grad", "forward", "criterion", "backward", "clip_grad_norm_", "parameters", "step"], "type": "full"}, "_drop_reason": "no_nn_module"}
{"id": "5ab47977-ac24-427d-9d07-9af3447c5c7b", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "# Auto-generated single-file for ViTPatchEmbeddings\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nimport collections\nfrom transformers import PretrainedConfig\nfrom collections import *\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.vit.configuration_vit.ViTConfig ----\nclass ViTConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ViTModel`]. It is used to instantiate an ViT\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the ViT\n    [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        encoder_stride (`int`, *optional*, defaults to 16):\n           Factor to increase the spatial resolution by in the decoder head for masked image modeling.\n        pooler_output_size (`int`, *optional*):\n           Dimensionality of the pooler layer. If None, defaults to `hidden_size`.\n        pooler_act (`str`, *optional*, defaults to `\"tanh\"`):\n           The activation function to be used by the pooler. Keys of ACT2FN are supported for Flax and\n           Pytorch, and elements of https://www.tensorflow.org/api_docs/python/tf/keras/activations are\n           supported for Tensorflow.\n\n    Example:\n\n    ```python\n    >>> from transformers import ViTConfig, ViTModel\n\n    >>> # Initializing a ViT vit-base-patch16-224 style configuration\n    >>> configuration = ViTConfig()\n\n    >>> # Initializing a model (with random weights) from the vit-base-patch16-224 style configuration\n    >>> model = ViTModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"vit\"\n\n    def __init__(\n        self,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.0,\n        attention_probs_dropout_prob=0.0,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        image_size=224,\n        patch_size=16,\n        num_channels=3,\n        qkv_bias=True,\n        encoder_stride=16,\n        pooler_output_size=None,\n        pooler_act=\"tanh\",\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.qkv_bias = qkv_bias\n        self.encoder_stride = encoder_stride\n        self.pooler_output_size = pooler_output_size if pooler_output_size else hidden_size\n        self.pooler_act = pooler_act\n\n# ---- ViTPatchEmbeddings (target) ----\nclass ViTPatchEmbeddings(nn.Module):\n    \"\"\"\n    This class turns `pixel_values` of shape `(batch_size, num_channels, height, width)` into the initial\n    `hidden_states` (patch embeddings) of shape `(batch_size, seq_length, hidden_size)` to be consumed by a\n    Transformer.\n    \"\"\"\n\n    def __init__(self, config: ViTConfig):\n        super().__init__()\n        image_size, patch_size = config.image_size, config.patch_size\n        num_channels, hidden_size = config.num_channels, config.hidden_size\n\n        image_size = image_size if isinstance(image_size, collections.abc.Iterable) else (image_size, image_size)\n        patch_size = patch_size if isinstance(patch_size, collections.abc.Iterable) else (patch_size, patch_size)\n        num_patches = (image_size[1] // patch_size[1]) * (image_size[0] // patch_size[0])\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.num_patches = num_patches\n\n        self.projection = nn.Conv2d(num_channels, hidden_size, kernel_size=patch_size, stride=patch_size)\n\n    def forward(self, pixel_values: torch.Tensor, interpolate_pos_encoding: bool = False) -> torch.Tensor:\n        batch_size, num_channels, height, width = pixel_values.shape\n        if num_channels != self.num_channels:\n            raise ValueError(\n                \"Make sure that the channel dimension of the pixel values match with the one set in the configuration.\"\n                f\" Expected {self.num_channels} but got {num_channels}.\"\n            )\n        if not interpolate_pos_encoding:\n            if height != self.image_size[0] or width != self.image_size[1]:\n                raise ValueError(\n                    f\"Input image size ({height}*{width}) doesn't match model\"\n                    f\" ({self.image_size[0]}*{self.image_size[1]}).\"\n                )\n        embeddings = self.projection(pixel_values).flatten(2).transpose(1, 2)\n        return embeddings\n\ndef supported_hyperparameters():\n    return {'lr', 'momentum'}\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n        \n        config = ViTConfig(\n            hidden_size=64,\n            image_size=32,\n            patch_size=4,\n            num_channels=self.in_channels\n        )\n        \n        self.vit_patch_embeddings = ViTPatchEmbeddings(config)\n        self.classifier = nn.Linear(64, self.num_classes)\n\n    def forward(self, x):\n        # >>> FILL HERE: implement forward() <<<\n\n    def train_setup(self, prm: dict):\n        self.optimizer = torch.optim.SGD(self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n        self.criterion = nn.CrossEntropyLoss()\n\n    def learn(self, data_roll):\n        for data, target in data_roll:\n            data, target = data.to(self.device), target.to(self.device)\n            self.optimizer.zero_grad()\n            output = self.forward(data)\n            loss = self.criterion(output, target)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), max_norm=1.0)\n            self.optimizer.step()"}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for ViTPatchEmbeddings\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nimport collections\nfrom transformers import PretrainedConfig\nfrom collections import *\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.vit.configuration_vit.ViTConfig ----\nclass ViTConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ViTModel`]. It is used to instantiate an ViT\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the ViT\n    [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        encoder_stride (`int`, *optional*, defaults to 16):\n           Factor to increase the spatial resolution by in the decoder head for masked image modeling.\n        pooler_output_size (`int`, *optional*):\n           Dimensionality of the pooler layer. If None, defaults to `hidden_size`.\n        pooler_act (`str`, *optional*, defaults to `\"tanh\"`):\n           The activation function to be used by the pooler. Keys of ACT2FN are supported for Flax and\n           Pytorch, and elements of https://www.tensorflow.org/api_docs/python/tf/keras/activations are\n           supported for Tensorflow.\n\n    Example:\n\n    ```python\n    >>> from transformers import ViTConfig, ViTModel\n\n    >>> # Initializing a ViT vit-base-patch16-224 style configuration\n    >>> configuration = ViTConfig()\n\n    >>> # Initializing a model (with random weights) from the vit-base-patch16-224 style configuration\n    >>> model = ViTModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"vit\"\n\n    def __init__(\n        self,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.0,\n        attention_probs_dropout_prob=0.0,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        image_size=224,\n        patch_size=16,\n        num_channels=3,\n        qkv_bias=True,\n        encoder_stride=16,\n        pooler_output_size=None,\n        pooler_act=\"tanh\",\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.qkv_bias = qkv_bias\n        self.encoder_stride = encoder_stride\n        self.pooler_output_size = pooler_output_size if pooler_output_size else hidden_size\n        self.pooler_act = pooler_act\n\n# ---- ViTPatchEmbeddings (target) ----\nclass ViTPatchEmbeddings(nn.Module):\n    \"\"\"\n    This class turns `pixel_values` of shape `(batch_size, num_channels, height, width)` into the initial\n    `hidden_states` (patch embeddings) of shape `(batch_size, seq_length, hidden_size)` to be consumed by a\n    Transformer.\n    \"\"\"\n\n    def __init__(self, config: ViTConfig):\n        super().__init__()\n        image_size, patch_size = config.image_size, config.patch_size\n        num_channels, hidden_size = config.num_channels, config.hidden_size\n\n        image_size = image_size if isinstance(image_size, collections.abc.Iterable) else (image_size, image_size)\n        patch_size = patch_size if isinstance(patch_size, collections.abc.Iterable) else (patch_size, patch_size)\n        num_patches = (image_size[1] // patch_size[1]) * (image_size[0] // patch_size[0])\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.num_patches = num_patches\n\n        self.projection = nn.Conv2d(num_channels, hidden_size, kernel_size=patch_size, stride=patch_size)\n\n    def forward(self, pixel_values: torch.Tensor, interpolate_pos_encoding: bool = False) -> torch.Tensor:\n        batch_size, num_channels, height, width = pixel_values.shape\n        if num_channels != self.num_channels:\n            raise ValueError(\n                \"Make sure that the channel dimension of the pixel values match with the one set in the configuration.\"\n                f\" Expected {self.num_channels} but got {num_channels}.\"\n            )\n        if not interpolate_pos_encoding:\n            if height != self.image_size[0] or width != self.image_size[1]:\n                raise ValueError(\n                    f\"Input image size ({height}*{width}) doesn't match model\"\n                    f\" ({self.image_size[0]}*{self.image_size[1]}).\"\n                )\n        embeddings = self.projection(pixel_values).flatten(2).transpose(1, 2)\n        return embeddings\n\ndef supported_hyperparameters():\n    return {'lr', 'momentum'}\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n        \n        config = ViTConfig(\n            hidden_size=64,\n            image_size=32,\n            patch_size=4,\n            num_channels=self.in_channels\n        )\n        \n        self.vit_patch_embeddings = ViTPatchEmbeddings(config)\n        self.classifier = nn.Linear(64, self.num_classes)\n\n    def forward(self, x):\n        B, C, H, W = x.shape\n        \n        x = torch.nn.functional.adaptive_avg_pool2d(x, (32, 32))\n        \n        x = self.vit_patch_embeddings(x)\n        \n        x = x.mean(dim=1)\n        x = self.classifier(x)\n        return x\n\n    def train_setup(self, prm: dict):\n        self.optimizer = torch.optim.SGD(self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n        self.criterion = nn.CrossEntropyLoss()\n\n    def learn(self, data_roll):\n        for data, target in data_roll:\n            data, target = data.to(self.device), target.to(self.device)\n            self.optimizer.zero_grad()\n            output = self.forward(data)\n            loss = self.criterion(output, target)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), max_norm=1.0)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-d820255594e76adf29ff0e5f37f6aa3c__e82eb615e95b.py", "has_module": true, "family": "resnet", "param_estimate": 0, "class_names": ["Net", "ViTConfig", "ViTPatchEmbeddings"], "calls": ["__init__", "super", "__init__", "super", "isinstance", "isinstance", "Conv2d", "ValueError", "ValueError", "transpose", "flatten", "projection", "__init__", "super", "ViTConfig", "ViTPatchEmbeddings", "Linear", "adaptive_avg_pool2d", "vit_patch_embeddings", "mean", "classifier", "SGD", "parameters", "CrossEntropyLoss", "to", "to", "zero_grad", "forward", "criterion", "backward", "clip_grad_norm_", "parameters", "step"], "type": "infill"}, "_drop_reason": "no_nn_module"}
{"id": "7a10d566-920f-48c7-99b4-d617a9fa2577", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "Task: Design a PyTorch CV model for image classification.\nDataset: CIFAR-10 (32x32 RGB).\nResource limits: params â‰¤ 300000; latency budget: tight (edge-friendly).\nConstraints: use standard layers only; no pretrained weights.\nAllowed training tricks: cosine_lr, cutmix<=0.2, ema.\nOutput contract: one Python code block defining a complete nn.Module (e.g., class Net(nn.Module))."}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for BertSelfAttention\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom torch import Tensor\nfrom typing import Optional, Tuple\nimport math\nfrom transformers import PretrainedConfig\nfrom typing import Optional\nfrom typing import Tuple\n\n# ---- src.transformers.models.bert.configuration_bert.BertConfig ----\nclass BertConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`BertModel`] or a [`TFBertModel`]. It is used to\n    instantiate a BERT model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the BERT\n    [google-bert/bert-base-uncased](https://huggingface.co/google-bert/bert-base-uncased) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://huggingface.co/papers/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://huggingface.co/papers/2009.13658).\n        is_decoder (`bool`, *optional*, defaults to `False`):\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Examples:\n\n    ```python\n    >>> from transformers import BertConfig, BertModel\n\n    >>> # Initializing a BERT google-bert/bert-base-uncased style configuration\n    >>> configuration = BertConfig()\n\n    >>> # Initializing a model (with random weights) from the google-bert/bert-base-uncased style configuration\n    >>> model = BertModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"bert\"\n\n    def __init__(\n        self,\n        vocab_size=30522,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=512,\n        type_vocab_size=2,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        pad_token_id=0,\n        position_embedding_type=\"absolute\",\n        use_cache=True,\n        classifier_dropout=None,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.use_cache = use_cache\n        self.classifier_dropout = classifier_dropout\n\n# ---- mmdet.models.utils.vlfuse_helper.MAX_CLAMP_VALUE ----\nMAX_CLAMP_VALUE = 50000\n\n# ---- BertSelfAttention (target) ----\nclass BertSelfAttention(nn.Module):\n    \"\"\"BERT self-attention layer from Huggingface transformers.\n\n    Compared to the BertSelfAttention of Huggingface, only add the clamp.\n\n    Args:\n        config (:class:`~transformers.BertConfig`):\n            The configuration object that\n            contains various parameters for the model.\n        clamp_min_for_underflow (bool, optional):\n            Whether to clamp the minimum value of the hidden states\n             to prevent underflow. Defaults to `False`.\n        clamp_max_for_overflow (bool, optional):\n            Whether to clamp the maximum value of the hidden states\n            to prevent overflow. Defaults to `False`.\n    \"\"\"\n\n    def __init__(self,\n                 config: BertConfig,\n                 clamp_min_for_underflow: bool = False,\n                 clamp_max_for_overflow: bool = False):\n        super().__init__()\n        if config.hidden_size % config.num_attention_heads != 0 and \\\n                not hasattr(config, 'embedding_size'):\n            raise ValueError(f'The hidden size ({config.hidden_size}) is '\n                             'not a multiple of the number of attention '\n                             f'heads ({config.num_attention_heads})')\n\n        self.num_attention_heads = config.num_attention_heads\n        self.attention_head_size = int(config.hidden_size /\n                                       config.num_attention_heads)\n        self.all_head_size = self.num_attention_heads * \\\n            self.attention_head_size\n\n        self.query = nn.Linear(config.hidden_size, self.all_head_size)\n        self.key = nn.Linear(config.hidden_size, self.all_head_size)\n        self.value = nn.Linear(config.hidden_size, self.all_head_size)\n\n        self.dropout = nn.Dropout(config.attention_probs_dropout_prob)\n        self.position_embedding_type = getattr(config,\n                                               'position_embedding_type',\n                                               'absolute')\n        if self.position_embedding_type == 'relative_key' or \\\n                self.position_embedding_type == 'relative_key_query':\n            self.max_position_embeddings = config.max_position_embeddings\n            self.distance_embedding = nn.Embedding(\n                2 * config.max_position_embeddings - 1,\n                self.attention_head_size)\n        self.clamp_min_for_underflow = clamp_min_for_underflow\n        self.clamp_max_for_overflow = clamp_max_for_overflow\n\n        self.is_decoder = config.is_decoder\n\n    def transpose_for_scores(self, x: Tensor) -> Tensor:\n        \"\"\"Transpose the dimensions of `x`.\"\"\"\n        new_x_shape = x.size()[:-1] + (self.num_attention_heads,\n                                       self.attention_head_size)\n        x = x.view(*new_x_shape)\n        return x.permute(0, 2, 1, 3)\n\n    def forward(\n        self,\n        hidden_states: Tensor,\n        attention_mask: Optional[Tensor] = None,\n        head_mask: Optional[Tensor] = None,\n        encoder_hidden_states: Optional[Tensor] = None,\n        encoder_attention_mask: Optional[Tensor] = None,\n        past_key_value: Optional[Tuple[Tensor, Tensor]] = None,\n        output_attentions: bool = False,\n    ) -> Tuple[Tensor, ...]:\n        \"\"\"Perform a forward pass through the BERT self-attention layer.\"\"\"\n\n        mixed_query_layer = self.query(hidden_states)\n\n        # If this is instantiated as a cross-attention module, the keys\n        # and values come from an encoder; the attention mask needs to be\n        # such that the encoder's padding tokens are not attended to.\n        is_cross_attention = encoder_hidden_states is not None\n\n        if is_cross_attention and past_key_value is not None:\n            # reuse k,v, cross_attentions\n            key_layer = past_key_value[0]\n            value_layer = past_key_value[1]\n            attention_mask = encoder_attention_mask\n        elif is_cross_attention:\n            key_layer = self.transpose_for_scores(\n                self.key(encoder_hidden_states))\n            value_layer = self.transpose_for_scores(\n                self.value(encoder_hidden_states))\n            attention_mask = encoder_attention_mask\n        elif past_key_value is not None:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n            key_layer = torch.cat([past_key_value[0], key_layer], dim=2)\n            value_layer = torch.cat([past_key_value[1], value_layer], dim=2)\n        else:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n\n        query_layer = self.transpose_for_scores(mixed_query_layer)\n\n        if self.is_decoder:\n            past_key_value = (key_layer, value_layer)\n\n        # Take the dot product between \"query\" and \"key\"\n        # to get the raw attention scores.\n        attention_scores = torch.matmul(query_layer,\n                                        key_layer.transpose(-1, -2))\n\n        if self.position_embedding_type == 'relative_key' or \\\n                self.position_embedding_type == 'relative_key_query':\n            seq_length = hidden_states.size()[1]\n            position_ids_l = torch.arange(\n                seq_length, dtype=torch.long,\n                device=hidden_states.device).view(-1, 1)\n            position_ids_r = torch.arange(\n                seq_length, dtype=torch.long,\n                device=hidden_states.device).view(1, -1)\n            distance = position_ids_l - position_ids_r\n            positional_embedding = self.distance_embedding(\n                distance + self.max_position_embeddings - 1)\n            positional_embedding = positional_embedding.to(\n                dtype=query_layer.dtype)  # fp16 compatibility\n\n            if self.position_embedding_type == 'relative_key':\n                relative_position_scores = torch.einsum(\n                    'bhld,lrd->bhlr', query_layer, positional_embedding)\n                attention_scores = attention_scores + relative_position_scores\n            elif self.position_embedding_type == 'relative_key_query':\n                relative_position_scores_query = torch.einsum(\n                    'bhld,lrd->bhlr', query_layer, positional_embedding)\n                relative_position_scores_key = torch.einsum(\n                    'bhrd,lrd->bhlr', key_layer, positional_embedding)\n                attention_scores = attention_scores + \\\n                    relative_position_scores_query + \\\n                    relative_position_scores_key\n\n        attention_scores = attention_scores / math.sqrt(\n            self.attention_head_size)\n\n        if self.clamp_min_for_underflow:\n            attention_scores = torch.clamp(\n                attention_scores, min=-MAX_CLAMP_VALUE\n            )  # Do not increase -50000, data type half has quite limited range\n        if self.clamp_max_for_overflow:\n            attention_scores = torch.clamp(\n                attention_scores, max=MAX_CLAMP_VALUE\n            )  # Do not increase 50000, data type half has quite limited range\n\n        if attention_mask is not None:\n            # Apply the attention mask is\n            # (precomputed for all layers in BertModel forward() function)\n            attention_scores = attention_scores + attention_mask\n\n        # Normalize the attention scores to probabilities.\n        attention_probs = nn.Softmax(dim=-1)(attention_scores)\n\n        # This is actually dropping out entire tokens to attend to, which might\n        # seem a bit unusual, but is taken from the original Transformer paper.\n        attention_probs = self.dropout(attention_probs)\n\n        # Mask heads if we want to\n        if head_mask is not None:\n            attention_probs = attention_probs * head_mask\n\n        context_layer = torch.matmul(attention_probs, value_layer)\n\n        context_layer = context_layer.permute(0, 2, 1, 3).contiguous()\n        new_context_layer_shape = context_layer.size()[:-2] + (\n            self.all_head_size, )\n        context_layer = context_layer.view(*new_context_layer_shape)\n\n        outputs = (context_layer,\n                   attention_probs) if output_attentions else (context_layer, )\n\n        if self.is_decoder:\n            outputs = outputs + (past_key_value, )\n        return outputs\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.classifier = nn.Linear(32, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 32, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        layers += [\n            nn.Conv2d(32, 32, kernel_size=3, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        config = BertConfig(\n            hidden_size=32,\n            num_attention_heads=4,\n            attention_probs_dropout_prob=0.1,\n            max_position_embeddings=512,\n            is_decoder=False\n        )\n        self.bert_self_attention = BertSelfAttention(config)\n\n        layers += [\n            nn.Conv2d(32, 32, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        self._last_channels = 32\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        B, C, H, W = x.shape\n        \n        x_small = torch.nn.functional.adaptive_avg_pool2d(x, (4, 4))\n        B, C, H_small, W_small = x_small.shape\n        \n        x_flat = x_small.view(B, C, H_small*W_small).transpose(1, 2)\n        \n        attention_output = self.bert_self_attention(x_flat)\n        x_embedded = attention_output[0]\n        \n        x_embedded = x_embedded.transpose(1, 2).view(B, 32, H_small, W_small)\n        \n        x_embedded = torch.nn.functional.interpolate(x_embedded, size=(H, W), mode='bilinear', align_corners=False)\n        \n        attention_weights = torch.sigmoid(x_embedded)\n        x_attended = x * attention_weights\n        \n        x = self.avgpool(x_attended)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-cf9dc0d7db9cb61aeca9102a1f9a016f__d907ec124606.py", "has_module": true, "family": "resnet", "param_estimate": 18432, "class_names": ["BertConfig", "BertSelfAttention", "Net"], "calls": ["__init__", "super", "__init__", "super", "hasattr", "ValueError", "int", "Linear", "Linear", "Linear", "Dropout", "getattr", "Embedding", "size", "view", "permute", "query", "transpose_for_scores", "key", "transpose_for_scores", "value", "transpose_for_scores", "key", "transpose_for_scores", "value", "cat", "cat", "transpose_for_scores", "key", "transpose_for_scores", "value", "transpose_for_scores", "matmul", "transpose", "size", "view", "arange", "view", "arange", "distance_embedding", "to", "einsum", "einsum", "einsum", "sqrt", "clamp", "clamp", "Softmax", "dropout", "matmul", "contiguous", "permute", "size", "view", "__init__", "super", "build_features", "AdaptiveAvgPool2d", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "BertConfig", "BertSelfAttention", "Conv2d", "BatchNorm2d", "ReLU", "Sequential", "features", "adaptive_avg_pool2d", "transpose", "view", "bert_self_attention", "view", "transpose", "interpolate", "sigmoid", "avgpool", "flatten", "classifier", "to", "to", "CrossEntropyLoss", "SGD", "parameters", "train", "to", "to", "zero_grad", "self", "criteria", "backward", "clip_grad_norm_", "parameters", "step"], "type": "full"}, "_drop_reason": "no_nn_module"}
{"id": "7045b7ec-54c9-4c56-997c-8b063b84334d", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "# Auto-generated single-file for BertSelfAttention\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom torch import Tensor\nfrom typing import Optional, Tuple\nimport math\nfrom transformers import PretrainedConfig\nfrom typing import Optional\nfrom typing import Tuple\n\n# ---- src.transformers.models.bert.configuration_bert.BertConfig ----\nclass BertConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`BertModel`] or a [`TFBertModel`]. It is used to\n    instantiate a BERT model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the BERT\n    [google-bert/bert-base-uncased](https://huggingface.co/google-bert/bert-base-uncased) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://huggingface.co/papers/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://huggingface.co/papers/2009.13658).\n        is_decoder (`bool`, *optional*, defaults to `False`):\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Examples:\n\n    ```python\n    >>> from transformers import BertConfig, BertModel\n\n    >>> # Initializing a BERT google-bert/bert-base-uncased style configuration\n    >>> configuration = BertConfig()\n\n    >>> # Initializing a model (with random weights) from the google-bert/bert-base-uncased style configuration\n    >>> model = BertModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"bert\"\n\n    def __init__(\n        self,\n        vocab_size=30522,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=512,\n        type_vocab_size=2,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        pad_token_id=0,\n        position_embedding_type=\"absolute\",\n        use_cache=True,\n        classifier_dropout=None,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.use_cache = use_cache\n        self.classifier_dropout = classifier_dropout\n\n# ---- mmdet.models.utils.vlfuse_helper.MAX_CLAMP_VALUE ----\nMAX_CLAMP_VALUE = 50000\n\n# ---- BertSelfAttention (target) ----\nclass BertSelfAttention(nn.Module):\n    \"\"\"BERT self-attention layer from Huggingface transformers.\n\n    Compared to the BertSelfAttention of Huggingface, only add the clamp.\n\n    Args:\n        config (:class:`~transformers.BertConfig`):\n            The configuration object that\n            contains various parameters for the model.\n        clamp_min_for_underflow (bool, optional):\n            Whether to clamp the minimum value of the hidden states\n             to prevent underflow. Defaults to `False`.\n        clamp_max_for_overflow (bool, optional):\n            Whether to clamp the maximum value of the hidden states\n            to prevent overflow. Defaults to `False`.\n    \"\"\"\n\n    def __init__(self,\n                 config: BertConfig,\n                 clamp_min_for_underflow: bool = False,\n                 clamp_max_for_overflow: bool = False):\n        super().__init__()\n        if config.hidden_size % config.num_attention_heads != 0 and \\\n                not hasattr(config, 'embedding_size'):\n            raise ValueError(f'The hidden size ({config.hidden_size}) is '\n                             'not a multiple of the number of attention '\n                             f'heads ({config.num_attention_heads})')\n\n        self.num_attention_heads = config.num_attention_heads\n        self.attention_head_size = int(config.hidden_size /\n                                       config.num_attention_heads)\n        self.all_head_size = self.num_attention_heads * \\\n            self.attention_head_size\n\n        self.query = nn.Linear(config.hidden_size, self.all_head_size)\n        self.key = nn.Linear(config.hidden_size, self.all_head_size)\n        self.value = nn.Linear(config.hidden_size, self.all_head_size)\n\n        self.dropout = nn.Dropout(config.attention_probs_dropout_prob)\n        self.position_embedding_type = getattr(config,\n                                               'position_embedding_type',\n                                               'absolute')\n        if self.position_embedding_type == 'relative_key' or \\\n                self.position_embedding_type == 'relative_key_query':\n            self.max_position_embeddings = config.max_position_embeddings\n            self.distance_embedding = nn.Embedding(\n                2 * config.max_position_embeddings - 1,\n                self.attention_head_size)\n        self.clamp_min_for_underflow = clamp_min_for_underflow\n        self.clamp_max_for_overflow = clamp_max_for_overflow\n\n        self.is_decoder = config.is_decoder\n\n    def transpose_for_scores(self, x: Tensor) -> Tensor:\n        \"\"\"Transpose the dimensions of `x`.\"\"\"\n        new_x_shape = x.size()[:-1] + (self.num_attention_heads,\n                                       self.attention_head_size)\n        x = x.view(*new_x_shape)\n        return x.permute(0, 2, 1, 3)\n\n    def forward(\n        self,\n        hidden_states: Tensor,\n        attention_mask: Optional[Tensor] = None,\n        head_mask: Optional[Tensor] = None,\n        encoder_hidden_states: Optional[Tensor] = None,\n        encoder_attention_mask: Optional[Tensor] = None,\n        past_key_value: Optional[Tuple[Tensor, Tensor]] = None,\n        output_attentions: bool = False,\n    ) -> Tuple[Tensor, ...]:\n        \"\"\"Perform a forward pass through the BERT self-attention layer.\"\"\"\n\n        mixed_query_layer = self.query(hidden_states)\n\n        # If this is instantiated as a cross-attention module, the keys\n        # and values come from an encoder; the attention mask needs to be\n        # such that the encoder's padding tokens are not attended to.\n        is_cross_attention = encoder_hidden_states is not None\n\n        if is_cross_attention and past_key_value is not None:\n            # reuse k,v, cross_attentions\n            key_layer = past_key_value[0]\n            value_layer = past_key_value[1]\n            attention_mask = encoder_attention_mask\n        elif is_cross_attention:\n            key_layer = self.transpose_for_scores(\n                self.key(encoder_hidden_states))\n            value_layer = self.transpose_for_scores(\n                self.value(encoder_hidden_states))\n            attention_mask = encoder_attention_mask\n        elif past_key_value is not None:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n            key_layer = torch.cat([past_key_value[0], key_layer], dim=2)\n            value_layer = torch.cat([past_key_value[1], value_layer], dim=2)\n        else:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n\n        query_layer = self.transpose_for_scores(mixed_query_layer)\n\n        if self.is_decoder:\n            past_key_value = (key_layer, value_layer)\n\n        # Take the dot product between \"query\" and \"key\"\n        # to get the raw attention scores.\n        attention_scores = torch.matmul(query_layer,\n                                        key_layer.transpose(-1, -2))\n\n        if self.position_embedding_type == 'relative_key' or \\\n                self.position_embedding_type == 'relative_key_query':\n            seq_length = hidden_states.size()[1]\n            position_ids_l = torch.arange(\n                seq_length, dtype=torch.long,\n                device=hidden_states.device).view(-1, 1)\n            position_ids_r = torch.arange(\n                seq_length, dtype=torch.long,\n                device=hidden_states.device).view(1, -1)\n            distance = position_ids_l - position_ids_r\n            positional_embedding = self.distance_embedding(\n                distance + self.max_position_embeddings - 1)\n            positional_embedding = positional_embedding.to(\n                dtype=query_layer.dtype)  # fp16 compatibility\n\n            if self.position_embedding_type == 'relative_key':\n                relative_position_scores = torch.einsum(\n                    'bhld,lrd->bhlr', query_layer, positional_embedding)\n                attention_scores = attention_scores + relative_position_scores\n            elif self.position_embedding_type == 'relative_key_query':\n                relative_position_scores_query = torch.einsum(\n                    'bhld,lrd->bhlr', query_layer, positional_embedding)\n                relative_position_scores_key = torch.einsum(\n                    'bhrd,lrd->bhlr', key_layer, positional_embedding)\n                attention_scores = attention_scores + \\\n                    relative_position_scores_query + \\\n                    relative_position_scores_key\n\n        attention_scores = attention_scores / math.sqrt(\n            self.attention_head_size)\n\n        if self.clamp_min_for_underflow:\n            attention_scores = torch.clamp(\n                attention_scores, min=-MAX_CLAMP_VALUE\n            )  # Do not increase -50000, data type half has quite limited range\n        if self.clamp_max_for_overflow:\n            attention_scores = torch.clamp(\n                attention_scores, max=MAX_CLAMP_VALUE\n            )  # Do not increase 50000, data type half has quite limited range\n\n        if attention_mask is not None:\n            # Apply the attention mask is\n            # (precomputed for all layers in BertModel forward() function)\n            attention_scores = attention_scores + attention_mask\n\n        # Normalize the attention scores to probabilities.\n        attention_probs = nn.Softmax(dim=-1)(attention_scores)\n\n        # This is actually dropping out entire tokens to attend to, which might\n        # seem a bit unusual, but is taken from the original Transformer paper.\n        attention_probs = self.dropout(attention_probs)\n\n        # Mask heads if we want to\n        if head_mask is not None:\n            attention_probs = attention_probs * head_mask\n\n        context_layer = torch.matmul(attention_probs, value_layer)\n\n        context_layer = context_layer.permute(0, 2, 1, 3).contiguous()\n        new_context_layer_shape = context_layer.size()[:-2] + (\n            self.all_head_size, )\n        context_layer = context_layer.view(*new_context_layer_shape)\n\n        outputs = (context_layer,\n                   attention_probs) if output_attentions else (context_layer, )\n\n        if self.is_decoder:\n            outputs = outputs + (past_key_value, )\n        return outputs\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.classifier = nn.Linear(32, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 32, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        layers += [\n            nn.Conv2d(32, 32, kernel_size=3, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        config = BertConfig(\n            hidden_size=32,\n            num_attention_heads=4,\n            attention_probs_dropout_prob=0.1,\n            max_position_embeddings=512,\n            is_decoder=False\n        )\n        self.bert_self_attention = BertSelfAttention(config)\n\n        layers += [\n            nn.Conv2d(32, 32, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        self._last_channels = 32\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        # >>> FILL HERE: implement forward() <<<\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n"}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for BertSelfAttention\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom torch import Tensor\nfrom typing import Optional, Tuple\nimport math\nfrom transformers import PretrainedConfig\nfrom typing import Optional\nfrom typing import Tuple\n\n# ---- src.transformers.models.bert.configuration_bert.BertConfig ----\nclass BertConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`BertModel`] or a [`TFBertModel`]. It is used to\n    instantiate a BERT model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the BERT\n    [google-bert/bert-base-uncased](https://huggingface.co/google-bert/bert-base-uncased) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`BertModel`] or [`TFBertModel`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://huggingface.co/papers/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://huggingface.co/papers/2009.13658).\n        is_decoder (`bool`, *optional*, defaults to `False`):\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Examples:\n\n    ```python\n    >>> from transformers import BertConfig, BertModel\n\n    >>> # Initializing a BERT google-bert/bert-base-uncased style configuration\n    >>> configuration = BertConfig()\n\n    >>> # Initializing a model (with random weights) from the google-bert/bert-base-uncased style configuration\n    >>> model = BertModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"bert\"\n\n    def __init__(\n        self,\n        vocab_size=30522,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=512,\n        type_vocab_size=2,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        pad_token_id=0,\n        position_embedding_type=\"absolute\",\n        use_cache=True,\n        classifier_dropout=None,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.use_cache = use_cache\n        self.classifier_dropout = classifier_dropout\n\n# ---- mmdet.models.utils.vlfuse_helper.MAX_CLAMP_VALUE ----\nMAX_CLAMP_VALUE = 50000\n\n# ---- BertSelfAttention (target) ----\nclass BertSelfAttention(nn.Module):\n    \"\"\"BERT self-attention layer from Huggingface transformers.\n\n    Compared to the BertSelfAttention of Huggingface, only add the clamp.\n\n    Args:\n        config (:class:`~transformers.BertConfig`):\n            The configuration object that\n            contains various parameters for the model.\n        clamp_min_for_underflow (bool, optional):\n            Whether to clamp the minimum value of the hidden states\n             to prevent underflow. Defaults to `False`.\n        clamp_max_for_overflow (bool, optional):\n            Whether to clamp the maximum value of the hidden states\n            to prevent overflow. Defaults to `False`.\n    \"\"\"\n\n    def __init__(self,\n                 config: BertConfig,\n                 clamp_min_for_underflow: bool = False,\n                 clamp_max_for_overflow: bool = False):\n        super().__init__()\n        if config.hidden_size % config.num_attention_heads != 0 and \\\n                not hasattr(config, 'embedding_size'):\n            raise ValueError(f'The hidden size ({config.hidden_size}) is '\n                             'not a multiple of the number of attention '\n                             f'heads ({config.num_attention_heads})')\n\n        self.num_attention_heads = config.num_attention_heads\n        self.attention_head_size = int(config.hidden_size /\n                                       config.num_attention_heads)\n        self.all_head_size = self.num_attention_heads * \\\n            self.attention_head_size\n\n        self.query = nn.Linear(config.hidden_size, self.all_head_size)\n        self.key = nn.Linear(config.hidden_size, self.all_head_size)\n        self.value = nn.Linear(config.hidden_size, self.all_head_size)\n\n        self.dropout = nn.Dropout(config.attention_probs_dropout_prob)\n        self.position_embedding_type = getattr(config,\n                                               'position_embedding_type',\n                                               'absolute')\n        if self.position_embedding_type == 'relative_key' or \\\n                self.position_embedding_type == 'relative_key_query':\n            self.max_position_embeddings = config.max_position_embeddings\n            self.distance_embedding = nn.Embedding(\n                2 * config.max_position_embeddings - 1,\n                self.attention_head_size)\n        self.clamp_min_for_underflow = clamp_min_for_underflow\n        self.clamp_max_for_overflow = clamp_max_for_overflow\n\n        self.is_decoder = config.is_decoder\n\n    def transpose_for_scores(self, x: Tensor) -> Tensor:\n        \"\"\"Transpose the dimensions of `x`.\"\"\"\n        new_x_shape = x.size()[:-1] + (self.num_attention_heads,\n                                       self.attention_head_size)\n        x = x.view(*new_x_shape)\n        return x.permute(0, 2, 1, 3)\n\n    def forward(\n        self,\n        hidden_states: Tensor,\n        attention_mask: Optional[Tensor] = None,\n        head_mask: Optional[Tensor] = None,\n        encoder_hidden_states: Optional[Tensor] = None,\n        encoder_attention_mask: Optional[Tensor] = None,\n        past_key_value: Optional[Tuple[Tensor, Tensor]] = None,\n        output_attentions: bool = False,\n    ) -> Tuple[Tensor, ...]:\n        \"\"\"Perform a forward pass through the BERT self-attention layer.\"\"\"\n\n        mixed_query_layer = self.query(hidden_states)\n\n        # If this is instantiated as a cross-attention module, the keys\n        # and values come from an encoder; the attention mask needs to be\n        # such that the encoder's padding tokens are not attended to.\n        is_cross_attention = encoder_hidden_states is not None\n\n        if is_cross_attention and past_key_value is not None:\n            # reuse k,v, cross_attentions\n            key_layer = past_key_value[0]\n            value_layer = past_key_value[1]\n            attention_mask = encoder_attention_mask\n        elif is_cross_attention:\n            key_layer = self.transpose_for_scores(\n                self.key(encoder_hidden_states))\n            value_layer = self.transpose_for_scores(\n                self.value(encoder_hidden_states))\n            attention_mask = encoder_attention_mask\n        elif past_key_value is not None:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n            key_layer = torch.cat([past_key_value[0], key_layer], dim=2)\n            value_layer = torch.cat([past_key_value[1], value_layer], dim=2)\n        else:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n\n        query_layer = self.transpose_for_scores(mixed_query_layer)\n\n        if self.is_decoder:\n            past_key_value = (key_layer, value_layer)\n\n        # Take the dot product between \"query\" and \"key\"\n        # to get the raw attention scores.\n        attention_scores = torch.matmul(query_layer,\n                                        key_layer.transpose(-1, -2))\n\n        if self.position_embedding_type == 'relative_key' or \\\n                self.position_embedding_type == 'relative_key_query':\n            seq_length = hidden_states.size()[1]\n            position_ids_l = torch.arange(\n                seq_length, dtype=torch.long,\n                device=hidden_states.device).view(-1, 1)\n            position_ids_r = torch.arange(\n                seq_length, dtype=torch.long,\n                device=hidden_states.device).view(1, -1)\n            distance = position_ids_l - position_ids_r\n            positional_embedding = self.distance_embedding(\n                distance + self.max_position_embeddings - 1)\n            positional_embedding = positional_embedding.to(\n                dtype=query_layer.dtype)  # fp16 compatibility\n\n            if self.position_embedding_type == 'relative_key':\n                relative_position_scores = torch.einsum(\n                    'bhld,lrd->bhlr', query_layer, positional_embedding)\n                attention_scores = attention_scores + relative_position_scores\n            elif self.position_embedding_type == 'relative_key_query':\n                relative_position_scores_query = torch.einsum(\n                    'bhld,lrd->bhlr', query_layer, positional_embedding)\n                relative_position_scores_key = torch.einsum(\n                    'bhrd,lrd->bhlr', key_layer, positional_embedding)\n                attention_scores = attention_scores + \\\n                    relative_position_scores_query + \\\n                    relative_position_scores_key\n\n        attention_scores = attention_scores / math.sqrt(\n            self.attention_head_size)\n\n        if self.clamp_min_for_underflow:\n            attention_scores = torch.clamp(\n                attention_scores, min=-MAX_CLAMP_VALUE\n            )  # Do not increase -50000, data type half has quite limited range\n        if self.clamp_max_for_overflow:\n            attention_scores = torch.clamp(\n                attention_scores, max=MAX_CLAMP_VALUE\n            )  # Do not increase 50000, data type half has quite limited range\n\n        if attention_mask is not None:\n            # Apply the attention mask is\n            # (precomputed for all layers in BertModel forward() function)\n            attention_scores = attention_scores + attention_mask\n\n        # Normalize the attention scores to probabilities.\n        attention_probs = nn.Softmax(dim=-1)(attention_scores)\n\n        # This is actually dropping out entire tokens to attend to, which might\n        # seem a bit unusual, but is taken from the original Transformer paper.\n        attention_probs = self.dropout(attention_probs)\n\n        # Mask heads if we want to\n        if head_mask is not None:\n            attention_probs = attention_probs * head_mask\n\n        context_layer = torch.matmul(attention_probs, value_layer)\n\n        context_layer = context_layer.permute(0, 2, 1, 3).contiguous()\n        new_context_layer_shape = context_layer.size()[:-2] + (\n            self.all_head_size, )\n        context_layer = context_layer.view(*new_context_layer_shape)\n\n        outputs = (context_layer,\n                   attention_probs) if output_attentions else (context_layer, )\n\n        if self.is_decoder:\n            outputs = outputs + (past_key_value, )\n        return outputs\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.classifier = nn.Linear(32, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 32, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        layers += [\n            nn.Conv2d(32, 32, kernel_size=3, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        config = BertConfig(\n            hidden_size=32,\n            num_attention_heads=4,\n            attention_probs_dropout_prob=0.1,\n            max_position_embeddings=512,\n            is_decoder=False\n        )\n        self.bert_self_attention = BertSelfAttention(config)\n\n        layers += [\n            nn.Conv2d(32, 32, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n        ]\n\n        self._last_channels = 32\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        B, C, H, W = x.shape\n        \n        x_small = torch.nn.functional.adaptive_avg_pool2d(x, (4, 4))\n        B, C, H_small, W_small = x_small.shape\n        \n        x_flat = x_small.view(B, C, H_small*W_small).transpose(1, 2)\n        \n        attention_output = self.bert_self_attention(x_flat)\n        x_embedded = attention_output[0]\n        \n        x_embedded = x_embedded.transpose(1, 2).view(B, 32, H_small, W_small)\n        \n        x_embedded = torch.nn.functional.interpolate(x_embedded, size=(H, W), mode='bilinear', align_corners=False)\n        \n        attention_weights = torch.sigmoid(x_embedded)\n        x_attended = x * attention_weights\n        \n        x = self.avgpool(x_attended)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-cf9dc0d7db9cb61aeca9102a1f9a016f__d907ec124606.py", "has_module": true, "family": "resnet", "param_estimate": 18432, "class_names": ["BertConfig", "BertSelfAttention", "Net"], "calls": ["__init__", "super", "__init__", "super", "hasattr", "ValueError", "int", "Linear", "Linear", "Linear", "Dropout", "getattr", "Embedding", "size", "view", "permute", "query", "transpose_for_scores", "key", "transpose_for_scores", "value", "transpose_for_scores", "key", "transpose_for_scores", "value", "cat", "cat", "transpose_for_scores", "key", "transpose_for_scores", "value", "transpose_for_scores", "matmul", "transpose", "size", "view", "arange", "view", "arange", "distance_embedding", "to", "einsum", "einsum", "einsum", "sqrt", "clamp", "clamp", "Softmax", "dropout", "matmul", "contiguous", "permute", "size", "view", "__init__", "super", "build_features", "AdaptiveAvgPool2d", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "BertConfig", "BertSelfAttention", "Conv2d", "BatchNorm2d", "ReLU", "Sequential", "features", "adaptive_avg_pool2d", "transpose", "view", "bert_self_attention", "view", "transpose", "interpolate", "sigmoid", "avgpool", "flatten", "classifier", "to", "to", "CrossEntropyLoss", "SGD", "parameters", "train", "to", "to", "zero_grad", "self", "criteria", "backward", "clip_grad_norm_", "parameters", "step"], "type": "infill"}, "_drop_reason": "no_nn_module"}
{"id": "b3fd2b9c-7d9f-4e3e-a119-09b8527e5662", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "Task: Design a PyTorch CV model for image classification.\nDataset: CIFAR-10 (32x32 RGB).\nResource limits: params â‰¤ 300000; latency budget: tight (edge-friendly).\nConstraints: use standard layers only; no pretrained weights.\nAllowed training tricks: cosine_lr, cutmix<=0.2, grad_clip<=3.0.\nOutput contract: one Python code block defining a complete nn.Module (e.g., class Net(nn.Module))."}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for ViTOutput\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom transformers import PretrainedConfig\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.vit.configuration_vit.ViTConfig ----\nclass ViTConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ViTModel`]. It is used to instantiate an ViT\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the ViT\n    [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        encoder_stride (`int`, *optional*, defaults to 16):\n           Factor to increase the spatial resolution by in the decoder head for masked image modeling.\n        pooler_output_size (`int`, *optional*):\n           Dimensionality of the pooler layer. If None, defaults to `hidden_size`.\n        pooler_act (`str`, *optional*, defaults to `\"tanh\"`):\n           The activation function to be used by the pooler. Keys of ACT2FN are supported for Flax and\n           Pytorch, and elements of https://www.tensorflow.org/api_docs/python/tf/keras/activations are\n           supported for Tensorflow.\n\n    Example:\n\n    ```python\n    >>> from transformers import ViTConfig, ViTModel\n\n    >>> # Initializing a ViT vit-base-patch16-224 style configuration\n    >>> configuration = ViTConfig()\n\n    >>> # Initializing a model (with random weights) from the vit-base-patch16-224 style configuration\n    >>> model = ViTModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"vit\"\n\n    def __init__(\n        self,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.0,\n        attention_probs_dropout_prob=0.0,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        image_size=224,\n        patch_size=16,\n        num_channels=3,\n        qkv_bias=True,\n        encoder_stride=16,\n        pooler_output_size=None,\n        pooler_act=\"tanh\",\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.qkv_bias = qkv_bias\n        self.encoder_stride = encoder_stride\n        self.pooler_output_size = pooler_output_size if pooler_output_size else hidden_size\n        self.pooler_act = pooler_act\n\n# ---- ViTOutput (target) ----\nclass ViTOutput(nn.Module):\n    def __init__(self, config: ViTConfig):\n        super().__init__()\n        self.dense = nn.Linear(config.intermediate_size, config.hidden_size)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n\n    def forward(self, hidden_states: torch.Tensor, input_tensor: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n        hidden_states = hidden_states + input_tensor\n        return hidden_states\n\ndef supported_hyperparameters():\n    return {'lr', 'momentum'}\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n        self.features = self.build_features()\n        \n        config = ViTConfig(\n            hidden_size=64,\n            intermediate_size=128,\n            hidden_dropout_prob=0.1\n        )\n        \n        self.vit_output = ViTOutput(config)\n        self.classifier = nn.Linear(64 * 4 * 4, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 32, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2)\n        ]\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        B, C, H, W = x.shape\n        \n        x = torch.nn.functional.adaptive_avg_pool2d(x, (4, 4))\n        B, C, H, W = x.shape\n        \n        x = x.view(B, C, -1).transpose(1, 2)\n        \n        intermediate_features = torch.randn(B, H*W, 128, device=x.device)\n        x = self.vit_output(intermediate_features, x)\n        \n        x = x.view(x.size(0), -1)\n        x = self.classifier(x)\n        return x\n\n    def train_setup(self, prm: dict):\n        self.optimizer = torch.optim.SGD(self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n        self.criterion = nn.CrossEntropyLoss()\n\n    def learn(self, data_roll):\n        for data, target in data_roll:\n            data, target = data.to(self.device), target.to(self.device)\n            self.optimizer.zero_grad()\n            output = self.forward(data)\n            loss = self.criterion(output, target)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), max_norm=1.0)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-38a8abada35d1af61546d91ee88de111__7b97605e94be.py", "has_module": true, "family": "resnet", "param_estimate": 18432, "class_names": ["Net", "ViTConfig", "ViTOutput"], "calls": ["__init__", "super", "__init__", "super", "Linear", "Dropout", "dense", "dropout", "__init__", "super", "build_features", "ViTConfig", "ViTOutput", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Sequential", "features", "adaptive_avg_pool2d", "transpose", "view", "randn", "vit_output", "view", "size", "classifier", "SGD", "parameters", "CrossEntropyLoss", "to", "to", "zero_grad", "forward", "criterion", "backward", "clip_grad_norm_", "parameters", "step"], "type": "full"}, "_drop_reason": "no_nn_module"}
{"id": "8f2cbbac-ecec-4e53-a8ae-ecb02534f606", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "# Auto-generated single-file for ViTOutput\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom transformers import PretrainedConfig\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.vit.configuration_vit.ViTConfig ----\nclass ViTConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ViTModel`]. It is used to instantiate an ViT\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the ViT\n    [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        encoder_stride (`int`, *optional*, defaults to 16):\n           Factor to increase the spatial resolution by in the decoder head for masked image modeling.\n        pooler_output_size (`int`, *optional*):\n           Dimensionality of the pooler layer. If None, defaults to `hidden_size`.\n        pooler_act (`str`, *optional*, defaults to `\"tanh\"`):\n           The activation function to be used by the pooler. Keys of ACT2FN are supported for Flax and\n           Pytorch, and elements of https://www.tensorflow.org/api_docs/python/tf/keras/activations are\n           supported for Tensorflow.\n\n    Example:\n\n    ```python\n    >>> from transformers import ViTConfig, ViTModel\n\n    >>> # Initializing a ViT vit-base-patch16-224 style configuration\n    >>> configuration = ViTConfig()\n\n    >>> # Initializing a model (with random weights) from the vit-base-patch16-224 style configuration\n    >>> model = ViTModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"vit\"\n\n    def __init__(\n        self,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.0,\n        attention_probs_dropout_prob=0.0,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        image_size=224,\n        patch_size=16,\n        num_channels=3,\n        qkv_bias=True,\n        encoder_stride=16,\n        pooler_output_size=None,\n        pooler_act=\"tanh\",\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.qkv_bias = qkv_bias\n        self.encoder_stride = encoder_stride\n        self.pooler_output_size = pooler_output_size if pooler_output_size else hidden_size\n        self.pooler_act = pooler_act\n\n# ---- ViTOutput (target) ----\nclass ViTOutput(nn.Module):\n    def __init__(self, config: ViTConfig):\n        super().__init__()\n        self.dense = nn.Linear(config.intermediate_size, config.hidden_size)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n\n    def forward(self, hidden_states: torch.Tensor, input_tensor: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n        hidden_states = hidden_states + input_tensor\n        return hidden_states\n\ndef supported_hyperparameters():\n    return {'lr', 'momentum'}\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n        self.features = self.build_features()\n        \n        config = ViTConfig(\n            hidden_size=64,\n            intermediate_size=128,\n            hidden_dropout_prob=0.1\n        )\n        \n        self.vit_output = ViTOutput(config)\n        self.classifier = nn.Linear(64 * 4 * 4, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 32, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2)\n        ]\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        # >>> FILL HERE: implement forward() <<<\n\n    def train_setup(self, prm: dict):\n        self.optimizer = torch.optim.SGD(self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n        self.criterion = nn.CrossEntropyLoss()\n\n    def learn(self, data_roll):\n        for data, target in data_roll:\n            data, target = data.to(self.device), target.to(self.device)\n            self.optimizer.zero_grad()\n            output = self.forward(data)\n            loss = self.criterion(output, target)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), max_norm=1.0)\n            self.optimizer.step()"}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for ViTOutput\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom transformers import PretrainedConfig\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.vit.configuration_vit.ViTConfig ----\nclass ViTConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ViTModel`]. It is used to instantiate an ViT\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the ViT\n    [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        encoder_stride (`int`, *optional*, defaults to 16):\n           Factor to increase the spatial resolution by in the decoder head for masked image modeling.\n        pooler_output_size (`int`, *optional*):\n           Dimensionality of the pooler layer. If None, defaults to `hidden_size`.\n        pooler_act (`str`, *optional*, defaults to `\"tanh\"`):\n           The activation function to be used by the pooler. Keys of ACT2FN are supported for Flax and\n           Pytorch, and elements of https://www.tensorflow.org/api_docs/python/tf/keras/activations are\n           supported for Tensorflow.\n\n    Example:\n\n    ```python\n    >>> from transformers import ViTConfig, ViTModel\n\n    >>> # Initializing a ViT vit-base-patch16-224 style configuration\n    >>> configuration = ViTConfig()\n\n    >>> # Initializing a model (with random weights) from the vit-base-patch16-224 style configuration\n    >>> model = ViTModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"vit\"\n\n    def __init__(\n        self,\n        hidden_size=768,\n        num_hidden_layers=12,\n        num_attention_heads=12,\n        intermediate_size=3072,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.0,\n        attention_probs_dropout_prob=0.0,\n        initializer_range=0.02,\n        layer_norm_eps=1e-12,\n        image_size=224,\n        patch_size=16,\n        num_channels=3,\n        qkv_bias=True,\n        encoder_stride=16,\n        pooler_output_size=None,\n        pooler_act=\"tanh\",\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.image_size = image_size\n        self.patch_size = patch_size\n        self.num_channels = num_channels\n        self.qkv_bias = qkv_bias\n        self.encoder_stride = encoder_stride\n        self.pooler_output_size = pooler_output_size if pooler_output_size else hidden_size\n        self.pooler_act = pooler_act\n\n# ---- ViTOutput (target) ----\nclass ViTOutput(nn.Module):\n    def __init__(self, config: ViTConfig):\n        super().__init__()\n        self.dense = nn.Linear(config.intermediate_size, config.hidden_size)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n\n    def forward(self, hidden_states: torch.Tensor, input_tensor: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n        hidden_states = hidden_states + input_tensor\n        return hidden_states\n\ndef supported_hyperparameters():\n    return {'lr', 'momentum'}\n\nclass Net(nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n        self.features = self.build_features()\n        \n        config = ViTConfig(\n            hidden_size=64,\n            intermediate_size=128,\n            hidden_dropout_prob=0.1\n        )\n        \n        self.vit_output = ViTOutput(config)\n        self.classifier = nn.Linear(64 * 4 * 4, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            nn.Conv2d(self.in_channels, 32, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2)\n        ]\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        B, C, H, W = x.shape\n        \n        x = torch.nn.functional.adaptive_avg_pool2d(x, (4, 4))\n        B, C, H, W = x.shape\n        \n        x = x.view(B, C, -1).transpose(1, 2)\n        \n        intermediate_features = torch.randn(B, H*W, 128, device=x.device)\n        x = self.vit_output(intermediate_features, x)\n        \n        x = x.view(x.size(0), -1)\n        x = self.classifier(x)\n        return x\n\n    def train_setup(self, prm: dict):\n        self.optimizer = torch.optim.SGD(self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n        self.criterion = nn.CrossEntropyLoss()\n\n    def learn(self, data_roll):\n        for data, target in data_roll:\n            data, target = data.to(self.device), target.to(self.device)\n            self.optimizer.zero_grad()\n            output = self.forward(data)\n            loss = self.criterion(output, target)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), max_norm=1.0)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-38a8abada35d1af61546d91ee88de111__7b97605e94be.py", "has_module": true, "family": "resnet", "param_estimate": 18432, "class_names": ["Net", "ViTConfig", "ViTOutput"], "calls": ["__init__", "super", "__init__", "super", "Linear", "Dropout", "dense", "dropout", "__init__", "super", "build_features", "ViTConfig", "ViTOutput", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Sequential", "features", "adaptive_avg_pool2d", "transpose", "view", "randn", "vit_output", "view", "size", "classifier", "SGD", "parameters", "CrossEntropyLoss", "to", "to", "zero_grad", "forward", "criterion", "backward", "clip_grad_norm_", "parameters", "step"], "type": "infill"}, "_drop_reason": "no_nn_module"}
{"id": "8c1668b0-4f4e-4e32-b4c5-9e769c979fb8", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "Task: Design a PyTorch CV model for image classification.\nDataset: ImageNet-1k (224x224 RGB).\nResource limits: params â‰¤ 300000; latency budget: tight (edge-friendly).\nConstraints: use standard layers only; no pretrained weights.\nAllowed training tricks: cosine_lr, dropout<=0.5, ema.\nOutput contract: one Python code block defining a complete nn.Module (e.g., class Net(nn.Module))."}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for CLIPTextEmbeddings\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom typing import Optional\nfrom transformers import PretrainedConfig\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.clip.configuration_clip.CLIPTextConfig ----\nclass CLIPTextConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`CLIPTextModel`]. It is used to instantiate a CLIP\n    text encoder according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the text encoder of the CLIP\n    [openai/clip-vit-base-patch32](https://huggingface.co/openai/clip-vit-base-patch32) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 49408):\n            Vocabulary size of the CLIP text model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`CLIPModel`].\n        hidden_size (`int`, *optional*, defaults to 512):\n            Dimensionality of the encoder layers and the pooler layer.\n        intermediate_size (`int`, *optional*, defaults to 2048):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        projection_dim (`int`, *optional*, defaults to 512):\n            Dimensionality of text and vision projection layers.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 8):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        max_position_embeddings (`int`, *optional*, defaults to 77):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        hidden_act (`str` or `function`, *optional*, defaults to `\"quick_gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` `\"quick_gelu\"` are supported.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-05):\n            The epsilon used by the layer normalization layers.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        initializer_factor (`float`, *optional*, defaults to 1.0):\n            A factor for initializing all weight matrices (should be kept to 1, used internally for initialization\n            testing).\n        pad_token_id (`int`, *optional*, defaults to 1):\n            Padding token id.\n        bos_token_id (`int`, *optional*, defaults to 49406):\n            Beginning of stream token id.\n        eos_token_id (`int`, *optional*, defaults to 49407):\n            End of stream token id.\n\n    Example:\n\n    ```python\n    >>> from transformers import CLIPTextConfig, CLIPTextModel\n\n    >>> # Initializing a CLIPTextConfig with openai/clip-vit-base-patch32 style configuration\n    >>> configuration = CLIPTextConfig()\n\n    >>> # Initializing a CLIPTextModel (with random weights) from the openai/clip-vit-base-patch32 style configuration\n    >>> model = CLIPTextModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"clip_text_model\"\n    base_config_key = \"text_config\"\n\n    def __init__(\n        self,\n        vocab_size=49408,\n        hidden_size=512,\n        intermediate_size=2048,\n        projection_dim=512,\n        num_hidden_layers=12,\n        num_attention_heads=8,\n        max_position_embeddings=77,\n        hidden_act=\"quick_gelu\",\n        layer_norm_eps=1e-5,\n        attention_dropout=0.0,\n        initializer_range=0.02,\n        initializer_factor=1.0,\n        # This differs from `CLIPTokenizer`'s default and from openai/clip\n        # See https://github.com/huggingface/transformers/pull/24773#issuecomment-1632287538\n        pad_token_id=1,\n        bos_token_id=49406,\n        eos_token_id=49407,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, bos_token_id=bos_token_id, eos_token_id=eos_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.intermediate_size = intermediate_size\n        self.projection_dim = projection_dim\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.max_position_embeddings = max_position_embeddings\n        self.layer_norm_eps = layer_norm_eps\n        self.hidden_act = hidden_act\n        self.initializer_range = initializer_range\n        self.initializer_factor = initializer_factor\n        self.attention_dropout = attention_dropout\n\n# ---- CLIPTextEmbeddings (target) ----\nclass CLIPTextEmbeddings(nn.Module):\n    def __init__(self, config: CLIPTextConfig):\n        super().__init__()\n        embed_dim = config.hidden_size\n\n        self.token_embedding = nn.Embedding(config.vocab_size, embed_dim)\n        self.position_embedding = nn.Embedding(config.max_position_embeddings, embed_dim)\n\n        # position_ids (1, len position emb) is contiguous in memory and exported when serialized\n        self.register_buffer(\n            \"position_ids\", torch.arange(config.max_position_embeddings).expand((1, -1)), persistent=False\n        )\n\n    def forward(\n        self,\n        input_ids: Optional[torch.LongTensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n    ) -> torch.Tensor:\n        seq_length = input_ids.shape[-1] if input_ids is not None else inputs_embeds.shape[-2]\n        max_position_embedding = self.position_embedding.weight.shape[0]\n\n        if seq_length > max_position_embedding:\n            raise ValueError(\n                f\"Sequence length must be less than max_position_embeddings (got `sequence length`: \"\n                f\"{seq_length} and max_position_embeddings: {max_position_embedding}\"\n            )\n\n        if position_ids is None:\n            position_ids = self.position_ids[:, :seq_length]\n\n        if inputs_embeds is None:\n            inputs_embeds = self.token_embedding(input_ids)\n\n        position_embeddings = self.position_embedding(position_ids)\n        embeddings = inputs_embeds + position_embeddings\n\n        return embeddings\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(torch.nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = torch.nn.AdaptiveAvgPool2d((1, 1))\n        self.image_proj = torch.nn.Linear(32, 512)\n        self.classifier = torch.nn.Linear(512, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            torch.nn.Conv2d(self.in_channels, 32, kernel_size=3, padding=1, bias=False),\n            torch.nn.BatchNorm2d(32),\n            torch.nn.ReLU(inplace=True),\n        ]\n\n        config = CLIPTextConfig(vocab_size=1000, hidden_size=512, max_position_embeddings=77)\n        self.clip_text_embeddings = CLIPTextEmbeddings(config)\n\n        self._last_channels = 32\n        return torch.nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        \n        batch_size = x.size(0)\n        dummy_input_ids = torch.randint(0, 1000, (batch_size, 10), device=x.device)\n        \n        # Get text embeddings\n        text_embeddings = self.clip_text_embeddings(input_ids=dummy_input_ids)\n        \n        text_features = text_embeddings.mean(dim=1) \n        x = self.image_proj(x)\n        \n        combined_features = x + text_features\n        return self.classifier(combined_features)\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = torch.nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-e7cfe3469378ffc243fe4a1cc9219af1__c9e54adeb733.py", "has_module": true, "family": "resnet", "param_estimate": 16384, "class_names": ["CLIPTextConfig", "CLIPTextEmbeddings", "Net"], "calls": ["__init__", "super", "__init__", "super", "Embedding", "Embedding", "register_buffer", "expand", "arange", "ValueError", "token_embedding", "position_embedding", "__init__", "super", "build_features", "AdaptiveAvgPool2d", "Linear", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "CLIPTextConfig", "CLIPTextEmbeddings", "Sequential", "features", "avgpool", "flatten", "size", "randint", "clip_text_embeddings", "mean", "image_proj", "classifier", "to", "to", "CrossEntropyLoss", "SGD", "parameters", "train", "to", "to", "zero_grad", "self", "criteria", "backward", "clip_grad_norm_", "parameters", "step"], "type": "full"}, "_drop_reason": "no_nn_module"}
{"id": "0a5eac6c-c0b9-4f00-be4d-6ebcb586a89c", "messages": [{"role": "system", "content": "You write clean, runnable PyTorch CV architectures. Output only a single Python code block containing a complete nn.Module. Respect user-provided resource limits (parameters/FLOPs/latency) and allowed training tricks. No extra prose outside the code block."}, {"role": "user", "content": "# Auto-generated single-file for CLIPTextEmbeddings\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom typing import Optional\nfrom transformers import PretrainedConfig\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.clip.configuration_clip.CLIPTextConfig ----\nclass CLIPTextConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`CLIPTextModel`]. It is used to instantiate a CLIP\n    text encoder according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the text encoder of the CLIP\n    [openai/clip-vit-base-patch32](https://huggingface.co/openai/clip-vit-base-patch32) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 49408):\n            Vocabulary size of the CLIP text model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`CLIPModel`].\n        hidden_size (`int`, *optional*, defaults to 512):\n            Dimensionality of the encoder layers and the pooler layer.\n        intermediate_size (`int`, *optional*, defaults to 2048):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        projection_dim (`int`, *optional*, defaults to 512):\n            Dimensionality of text and vision projection layers.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 8):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        max_position_embeddings (`int`, *optional*, defaults to 77):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        hidden_act (`str` or `function`, *optional*, defaults to `\"quick_gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` `\"quick_gelu\"` are supported.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-05):\n            The epsilon used by the layer normalization layers.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        initializer_factor (`float`, *optional*, defaults to 1.0):\n            A factor for initializing all weight matrices (should be kept to 1, used internally for initialization\n            testing).\n        pad_token_id (`int`, *optional*, defaults to 1):\n            Padding token id.\n        bos_token_id (`int`, *optional*, defaults to 49406):\n            Beginning of stream token id.\n        eos_token_id (`int`, *optional*, defaults to 49407):\n            End of stream token id.\n\n    Example:\n\n    ```python\n    >>> from transformers import CLIPTextConfig, CLIPTextModel\n\n    >>> # Initializing a CLIPTextConfig with openai/clip-vit-base-patch32 style configuration\n    >>> configuration = CLIPTextConfig()\n\n    >>> # Initializing a CLIPTextModel (with random weights) from the openai/clip-vit-base-patch32 style configuration\n    >>> model = CLIPTextModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"clip_text_model\"\n    base_config_key = \"text_config\"\n\n    def __init__(\n        self,\n        vocab_size=49408,\n        hidden_size=512,\n        intermediate_size=2048,\n        projection_dim=512,\n        num_hidden_layers=12,\n        num_attention_heads=8,\n        max_position_embeddings=77,\n        hidden_act=\"quick_gelu\",\n        layer_norm_eps=1e-5,\n        attention_dropout=0.0,\n        initializer_range=0.02,\n        initializer_factor=1.0,\n        # This differs from `CLIPTokenizer`'s default and from openai/clip\n        # See https://github.com/huggingface/transformers/pull/24773#issuecomment-1632287538\n        pad_token_id=1,\n        bos_token_id=49406,\n        eos_token_id=49407,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, bos_token_id=bos_token_id, eos_token_id=eos_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.intermediate_size = intermediate_size\n        self.projection_dim = projection_dim\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.max_position_embeddings = max_position_embeddings\n        self.layer_norm_eps = layer_norm_eps\n        self.hidden_act = hidden_act\n        self.initializer_range = initializer_range\n        self.initializer_factor = initializer_factor\n        self.attention_dropout = attention_dropout\n\n# ---- CLIPTextEmbeddings (target) ----\nclass CLIPTextEmbeddings(nn.Module):\n    def __init__(self, config: CLIPTextConfig):\n        super().__init__()\n        embed_dim = config.hidden_size\n\n        self.token_embedding = nn.Embedding(config.vocab_size, embed_dim)\n        self.position_embedding = nn.Embedding(config.max_position_embeddings, embed_dim)\n\n        # position_ids (1, len position emb) is contiguous in memory and exported when serialized\n        self.register_buffer(\n            \"position_ids\", torch.arange(config.max_position_embeddings).expand((1, -1)), persistent=False\n        )\n\n    def forward(\n        self,\n        input_ids: Optional[torch.LongTensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n    ) -> torch.Tensor:\n        seq_length = input_ids.shape[-1] if input_ids is not None else inputs_embeds.shape[-2]\n        max_position_embedding = self.position_embedding.weight.shape[0]\n\n        if seq_length > max_position_embedding:\n            raise ValueError(\n                f\"Sequence length must be less than max_position_embeddings (got `sequence length`: \"\n                f\"{seq_length} and max_position_embeddings: {max_position_embedding}\"\n            )\n\n        if position_ids is None:\n            position_ids = self.position_ids[:, :seq_length]\n\n        if inputs_embeds is None:\n            inputs_embeds = self.token_embedding(input_ids)\n\n        position_embeddings = self.position_embedding(position_ids)\n        embeddings = inputs_embeds + position_embeddings\n\n        return embeddings\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(torch.nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = torch.nn.AdaptiveAvgPool2d((1, 1))\n        self.image_proj = torch.nn.Linear(32, 512)\n        self.classifier = torch.nn.Linear(512, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            torch.nn.Conv2d(self.in_channels, 32, kernel_size=3, padding=1, bias=False),\n            torch.nn.BatchNorm2d(32),\n            torch.nn.ReLU(inplace=True),\n        ]\n\n        config = CLIPTextConfig(vocab_size=1000, hidden_size=512, max_position_embeddings=77)\n        self.clip_text_embeddings = CLIPTextEmbeddings(config)\n\n        self._last_channels = 32\n        return torch.nn.Sequential(*layers)\n\n    def forward(self, x):\n        # >>> FILL HERE: implement forward() <<<\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = torch.nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()"}, {"role": "assistant", "content": "```python\n# Auto-generated single-file for CLIPTextEmbeddings\n# Dependencies are emitted in topological order (utilities first).\n# Standard library and external imports\nimport torch\nimport torch.nn as nn\nfrom typing import Optional\nfrom transformers import PretrainedConfig\n\n# ---- original imports from contributing modules ----\nfrom torch import nn\n\n# ---- src.transformers.models.clip.configuration_clip.CLIPTextConfig ----\nclass CLIPTextConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`CLIPTextModel`]. It is used to instantiate a CLIP\n    text encoder according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the text encoder of the CLIP\n    [openai/clip-vit-base-patch32](https://huggingface.co/openai/clip-vit-base-patch32) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 49408):\n            Vocabulary size of the CLIP text model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`CLIPModel`].\n        hidden_size (`int`, *optional*, defaults to 512):\n            Dimensionality of the encoder layers and the pooler layer.\n        intermediate_size (`int`, *optional*, defaults to 2048):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        projection_dim (`int`, *optional*, defaults to 512):\n            Dimensionality of text and vision projection layers.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 8):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        max_position_embeddings (`int`, *optional*, defaults to 77):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        hidden_act (`str` or `function`, *optional*, defaults to `\"quick_gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` `\"quick_gelu\"` are supported.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-05):\n            The epsilon used by the layer normalization layers.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        initializer_factor (`float`, *optional*, defaults to 1.0):\n            A factor for initializing all weight matrices (should be kept to 1, used internally for initialization\n            testing).\n        pad_token_id (`int`, *optional*, defaults to 1):\n            Padding token id.\n        bos_token_id (`int`, *optional*, defaults to 49406):\n            Beginning of stream token id.\n        eos_token_id (`int`, *optional*, defaults to 49407):\n            End of stream token id.\n\n    Example:\n\n    ```python\n    >>> from transformers import CLIPTextConfig, CLIPTextModel\n\n    >>> # Initializing a CLIPTextConfig with openai/clip-vit-base-patch32 style configuration\n    >>> configuration = CLIPTextConfig()\n\n    >>> # Initializing a CLIPTextModel (with random weights) from the openai/clip-vit-base-patch32 style configuration\n    >>> model = CLIPTextModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"clip_text_model\"\n    base_config_key = \"text_config\"\n\n    def __init__(\n        self,\n        vocab_size=49408,\n        hidden_size=512,\n        intermediate_size=2048,\n        projection_dim=512,\n        num_hidden_layers=12,\n        num_attention_heads=8,\n        max_position_embeddings=77,\n        hidden_act=\"quick_gelu\",\n        layer_norm_eps=1e-5,\n        attention_dropout=0.0,\n        initializer_range=0.02,\n        initializer_factor=1.0,\n        # This differs from `CLIPTokenizer`'s default and from openai/clip\n        # See https://github.com/huggingface/transformers/pull/24773#issuecomment-1632287538\n        pad_token_id=1,\n        bos_token_id=49406,\n        eos_token_id=49407,\n        **kwargs,\n    ):\n        super().__init__(pad_token_id=pad_token_id, bos_token_id=bos_token_id, eos_token_id=eos_token_id, **kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.intermediate_size = intermediate_size\n        self.projection_dim = projection_dim\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.max_position_embeddings = max_position_embeddings\n        self.layer_norm_eps = layer_norm_eps\n        self.hidden_act = hidden_act\n        self.initializer_range = initializer_range\n        self.initializer_factor = initializer_factor\n        self.attention_dropout = attention_dropout\n\n# ---- CLIPTextEmbeddings (target) ----\nclass CLIPTextEmbeddings(nn.Module):\n    def __init__(self, config: CLIPTextConfig):\n        super().__init__()\n        embed_dim = config.hidden_size\n\n        self.token_embedding = nn.Embedding(config.vocab_size, embed_dim)\n        self.position_embedding = nn.Embedding(config.max_position_embeddings, embed_dim)\n\n        # position_ids (1, len position emb) is contiguous in memory and exported when serialized\n        self.register_buffer(\n            \"position_ids\", torch.arange(config.max_position_embeddings).expand((1, -1)), persistent=False\n        )\n\n    def forward(\n        self,\n        input_ids: Optional[torch.LongTensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n    ) -> torch.Tensor:\n        seq_length = input_ids.shape[-1] if input_ids is not None else inputs_embeds.shape[-2]\n        max_position_embedding = self.position_embedding.weight.shape[0]\n\n        if seq_length > max_position_embedding:\n            raise ValueError(\n                f\"Sequence length must be less than max_position_embeddings (got `sequence length`: \"\n                f\"{seq_length} and max_position_embeddings: {max_position_embedding}\"\n            )\n\n        if position_ids is None:\n            position_ids = self.position_ids[:, :seq_length]\n\n        if inputs_embeds is None:\n            inputs_embeds = self.token_embedding(input_ids)\n\n        position_embeddings = self.position_embedding(position_ids)\n        embeddings = inputs_embeds + position_embeddings\n\n        return embeddings\n\n\ndef supported_hyperparameters():\n    return {'lr','momentum'}\n\n\nclass Net(torch.nn.Module):\n    def __init__(self, in_shape: tuple, out_shape: tuple, prm: dict, device: torch.device) -> None:\n        super().__init__()\n        self.device = device\n        self.in_channels = in_shape[1]\n        self.image_size = in_shape[2]\n        self.num_classes = out_shape[0]\n        self.learning_rate = prm['lr']\n        self.momentum = prm['momentum']\n\n        self.features = self.build_features()\n        self.avgpool = torch.nn.AdaptiveAvgPool2d((1, 1))\n        self.image_proj = torch.nn.Linear(32, 512)\n        self.classifier = torch.nn.Linear(512, self.num_classes)\n\n    def build_features(self):\n        layers = []\n        layers += [\n            torch.nn.Conv2d(self.in_channels, 32, kernel_size=3, padding=1, bias=False),\n            torch.nn.BatchNorm2d(32),\n            torch.nn.ReLU(inplace=True),\n        ]\n\n        config = CLIPTextConfig(vocab_size=1000, hidden_size=512, max_position_embeddings=77)\n        self.clip_text_embeddings = CLIPTextEmbeddings(config)\n\n        self._last_channels = 32\n        return torch.nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        \n        batch_size = x.size(0)\n        dummy_input_ids = torch.randint(0, 1000, (batch_size, 10), device=x.device)\n        \n        # Get text embeddings\n        text_embeddings = self.clip_text_embeddings(input_ids=dummy_input_ids)\n        \n        text_features = text_embeddings.mean(dim=1) \n        x = self.image_proj(x)\n        \n        combined_features = x + text_features\n        return self.classifier(combined_features)\n\n    def train_setup(self, prm):\n        self.to(self.device)\n        self.criteria = torch.nn.CrossEntropyLoss().to(self.device)\n        self.optimizer = torch.optim.SGD(\n            self.parameters(), lr=self.learning_rate, momentum=self.momentum)\n\n    def learn(self, train_data):\n        self.train()\n        for inputs, labels in train_data:\n            inputs, labels = inputs.to(self.device), labels.to(self.device)\n            self.optimizer.zero_grad()\n            outputs = self(inputs)\n            loss = self.criteria(outputs, labels)\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.parameters(), 3)\n            self.optimizer.step()\n```"}], "meta": {"source_path": "curation_output/accepted_code/rag-e7cfe3469378ffc243fe4a1cc9219af1__c9e54adeb733.py", "has_module": true, "family": "resnet", "param_estimate": 16384, "class_names": ["CLIPTextConfig", "CLIPTextEmbeddings", "Net"], "calls": ["__init__", "super", "__init__", "super", "Embedding", "Embedding", "register_buffer", "expand", "arange", "ValueError", "token_embedding", "position_embedding", "__init__", "super", "build_features", "AdaptiveAvgPool2d", "Linear", "Linear", "Conv2d", "BatchNorm2d", "ReLU", "CLIPTextConfig", "CLIPTextEmbeddings", "Sequential", "features", "avgpool", "flatten", "size", "randint", "clip_text_embeddings", "mean", "image_proj", "classifier", "to", "to", "CrossEntropyLoss", "SGD", "parameters", "train", "to", "to", "zero_grad", "self", "criteria", "backward", "clip_grad_norm_", "parameters", "step"], "type": "infill"}, "_drop_reason": "no_nn_module"}
